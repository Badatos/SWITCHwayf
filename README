Copyright 2011 SWITCH - Serving Swiss Universities. 
See LICENSE file for details.

-------------------------------------------------------------------------------
SWITCH WAYF
Contact: aai@switch.ch or go to http://www.switch.ch/aai/wayf
Version: See head of file 'WAYF' in the same directory
Project web site: https://forge.switch.ch/redmine/projects/wayf
Bug reports/feature requests: https://forge.switch.ch/redmine/projects/wayf/issues
-------------------------------------------------------------------------------

Description:
The SWITCHwayf is an implementation of the Shibboleth WAYF and SAML2 Discovery 
Service protocol for use withing a Shibboleth architecture.

-------------------------------------------------------------------------------

Security Notes

Release (25. October 2010):
The Discovery Service protocol as defined in 
http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-idp-discovery.pdf 
states that the protocol creates opportunities for phishing attacks as do all
SSO protocols that make use of redirection. The specification states that an 
implementation "SHOULD" examine the 'return' parameter used in a Discovery 
Service request and match it against the <idpdisc:DiscoveryResponse> 
extension in SAML metadata. The implementation of the Discovery Service protocol
in the SWITCHwayf prior to version 1.14 does NOT verify the return parameter 
even if SAML metadata was used to generate the list of Identity Provider.
Version 1.14 or newer fixes this problem.

Thanks to Tom Scavo for making us aware of this issue.

-------------------------------------------------------------------------------

Some of the Features:
- Preselecting entry in drop down list by
  - SAML common domain cookie that contains selected Identity Providers 
  - resource path info hint (e.g. 
    /WAYF/unige.ch?shire=https://... selects University  of Geneva, depends 
    of course on the ID scheme a federation uses)
  - Kerberos preselection
  - IP range preselection
  - IP reverse DNS lookup preselection
- Transparent redirection mode, e.g. /WAYF/unige.ch/redirect?shire=https://...
- Can read SAML2 metadata files
- Supports Discovery Service and the Shibboleth authentication request protocol 
- Various customizations options for header, footer, language strings etc.
- HTML code generation for embedding the WAYF directly into a web page
- Support for templates
- Support for remembering IdP selection permanently
- I18N support, currently language packs for en, de, it, fr and pt are included

-------------------------------------------------------------------------------

Requirements:
- The web server must support PHP5
- If the configuration and the backup configuration differ, you have to make 
  sure the user that runs the php script has write access for the configuration
  files.
- PHP XML Parser extension for parsing SAML2 metadata
-------------------------------------------------------------------------------

Installation:
1. Unpack the Zip archive into a directory on a host where Apache 
  (IIS also should work) is deployed. 

2. Make a copy of the *.dist.php files
   - Copy the file config.dist.php and name it config.php 
     This is the main configuration file of the SWITCHwayf
   - Copy the file IDProvider.conf.dist.php and name it IDProvider.conf.php
     This file contains the list of Identity Providers that you configure 
     by hand

3. Make sure that permissions for the files:
     - SProvider.metadata.php
     - IDProvider.metadata.php 
     - metadata.lock
     - $WAYFLogFile (typically /var/log/apache2/wayf.log)
   are set such that the web server user (e.g. www-data, www or httpd) has write
   permissions for these two files.

4. Adapt the SWITCHwayf configuration in config.php. There are comments in that
   file that should help you make suitable choices for your use case.

5. If you use Apache 2, add the following statement to the Apache configugration:

--
<Location /path/to/WAYF>
  SetHandler php5-script
</Location>
--

   In some clustered environments with FastCGI it may be necessary to use 
   something like

--
Options +FollowSymLinks

<IfModule mod_rewrite.c>
  RewriteEngine On
  RewriteRule ^WAYF/(.*)$ WAYF.php/$1 [QSA,L]
  RewriteRule ^WAYF$ WAYF.php [QSA,L]
</IfModule>
--

   Alternatively, one also could rename the file 'WAYF' to 'WAYF.php'.

6. When using the embedded WAYF feature it might be necessary to add a line to 
   the Apache configuration like below in order to prevent certain web browsers 
   from not displaying the Embedded WAYF or parts of it:

--
Header set P3P "CP=\"NOI CUR DEVa OUR IND COM NAV PRE\""
--

   For that to work, the Apache header extension must also be enabled
   with a command like:

--
a2enmod headers
/etc/init.d/apache2 reload
--

   See http://www.w3.org/P3P/ for more details on P3P.

7. Test access by calling the WAYF with a URL like:
   https://your.host.com/path/to/WAYF
   Use this URL as Location for your Shibboleth configuration. The WAYF
   will automatically be able to detect whether it receives a Shibboleth 
   authentication request or a Discovery Service request.

-------------------------------------------------------------------------------

Update in general:
1. Make a backup of the directory where the currently active version of the 
   SWITCHwayf is installed
2. Get the compressed archive of the new version and move it into the directory
   of the currently deployed version
3. Unpack the archive with zip or tar
   This step will overwrite some existing files. Files whose name starts 
   with 'custom-' will not be overwritten.
4. Have a look at config.dist.php and compare this file with your current
   config.php in order to identify new configuration options.

Update from versions before 1.4.3:
The new setting '$metadataLockFile' was introduced in config.php. It allows
configuring the location of the lock file. When the SWITCHwayf is used in a 
Windows environment, the path to this file probably has to be adapted.


Update from versions before 1.8:
This version has a slightly different structure than previous versions. 
Therefore, it is recommended to start with a clean installation. 
However, you should be able to take over most of your old config.php 
functions and use them in the new template.php file again to keep your 
customized look and feel.


-------------------------------------------------------------------------------

Troubleshooting:
Generall, if there is an error or an exception, the WAYF will log the to syslog. 
In case there is a problem and you see only a white page without any output, 
open config.php in a text editor, go to the bottom of the file and set:

$developmentMode = true;

This will output PHP warning messages which are otherwise supressed.

-------------------------------------------------------------------------------

Customizations:
Since version 1.12 any graphical aspects of this WAYF/DS implementation can be 
customized such that these changes survive an upgrade. In particular, the 
following customizations can be applied:

HTML header:   custom-header.php
Customize page header

HTML Footer:   custom-footer.php
Customize page footer 

HTML Body:     custom-body.php
Customize WAYF/DS body

HTML Body:     custom-settings.php
Customize WAYF/DS permanent settings body

HTML Body:     custom-notice.php
Customize WAYF/DS permanent settings notice body

HTML Body:     custom-embedded-wayf.php
Customize WAYF/DS body

HTML Error:    custom-error.php
Customize error messages

Languages:     custom-languages.php
Can be used to change default or add new language strings. In contrast to the 
above template files, this won't replace the default-languages.php but extend or
modify it.

If the above files don't exist, the default templates and settings 
will be used. To create a custom template, copy of the default files with 
cp default-{$template}.php custom-{$template}.php 
where {$template} stands for the file you want to customize.

-------------------------------------------------------------------------------

Logging:

The general log where errors are written to is syslog. This log file will 
contain error messages for example in case files cannot be read or written.

If the configuration option $useLogging is true, a log file will be written to 
the path specified in $WAYFLogFile. This log file is an audit log file where 
each line is an entry of the form:

#DATE# #TIME# #IP# #IDP_SELECTION# #REQUEST_TYPE# #IDP_ENTITYID# #FORWARDING_URL#

Log entries are only created if the user was forwarded to an Identity Provider.

#DATE#            Date of request, e.g. 2010-11-02
#TIME#            Time of request, e.g. 06:25:13
#IP#              IP of requester, e.g. 127.0.0.1
#IDP_SELECTION#   How the IdP was selected: Cookie or Request
#REQUEST_TYPE#    Type of request: DS, WAYF, Embedded-DS, Embedded-WAYF
#IDP_ENTITYID#    EntityID of the IdP the user was forwarded to.
#FORWARDING_URL#  URL the user was redirected to

-------------------------------------------------------------------------------

Optimizations:

If your instance of the SWITCHwayf has many requests and the load is becoming 
higher and higher, you might want to think about using a PHP opcode cacher like 
XCache, apc,  eaccelerator,  phpa,  truck-mmcache or similar.  
Using such a tool can decrease the processing time of the PHP code almost by 
half. However, internal tests have shown that the bottleneck in general is not 
the PHP processing but the TLS handshake, which has nothing to do with PHP 
itself. Benchmark tests conducted by SWITCH demonstrated that generating the 
Javascript WAYF/embedded-wayf.js can be speed up by 100% if the script provided
the script is accessed via HTTP (without TLS). However, if the script is 
accessed via HTTPS (default in SWITCHaai), the overall speed gain by using 
XCache is less than 1% because the TLS hand-shake is what consumes most CPU time.

-------------------------------------------------------------------------------

SAML2 Metadata support:

In case you want the WAYF/DS to display the list of IdPs by parsing them from a
SAML2 Medatadata file that is used by Shibboleth

- Set $useSAML2Metadata in config.php to true
- Specify the path to the metadata file that shall be read in $metadataFile
  and make sure this file is updated regularely by Shibboleth or a cron job
- Make sure the files specified in $metadataIDPFile and $metadataSPFile can be 
  written by the userthat executes the PHP script (the web server user, 
  e.g. www-data or _www)

The parsend IDP and SP entries will be stored in $metadataIDPFile and 
$metadataSPFile as executable PHP code. Storing parsed information in JSON or 
PHP serialized format would allow faster reading and executing in general. 
However, for large numbers of entities an opcode cacher might speed up execution 
time considerably (see chapter "Optimization" above) thanks to this format. 

If you want to change, remove or extend an entry from this automatically 
generated file, you  can extend the IDP definitions by modifying them in 
the $IDPConfigFile. In case you want to overwrite some IDP values with entries in 
the $IDPConfigFile, make sure the entry $SAML2MetaOverLocalConf is set to false;
For example you could change the displayed name of an IdP by adding an entry in
the file $IDPConfigFile like:

$IDProviders["urn:mace:switch.ch:SWITCHaai:switch.ch"]["Name"] = "Foobar";

You could also manually force the IdP list being upgraded by running the 
readMetadata.php in command line mode, e.g. by executing a cron script like:
5 * * * * /usr/bin/php readMetadata.php > /dev/null

This feature has been initially developed in the framework of GRNET's project 
VNOC by Pavlos Drandakis.

-------------------------------------------------------------------------------

Embedded WAYF support:
With the embedded WAYF support you as an administrator of an application that is
protected by Shibboleth, can easily integrate a Discovery Service on the home 
page of your application just by copying and adapting the HTML code snippet at 
the bottom of this file.

The embedded WAYF then will display on the remote site a drop-down list with the
same Identity  Providers as if you were on this instance of the WAYF directly.

However, you can also configure the embedded WAYF for your site by hiding or 
adding certain Identity Providers (even from remote federations) or adapt the
look and feel of the embedded wayf. This can be done by simpling modifying the
JavaScript variables in the HTML snippet that can be found at the bottom of 
the page.


Note:
If you operate a WAYF for your federation, you must carefully protect the 
host this WAYF is operated on when you activate this feature. If your WAYF 
host gets compromised, an attacker could modify the JavaScript that is embedded
on the remote site in a malicous wayf (e.g. phish the user's password, redirect
users to malicous pages, steal their sessions etc). You also have to make sure
that your central WAYF has a very high availability because a lot of third-party
services will depend on it.

Also, please be aware that using the Embedded WAYF allows anybody to guess a 
user's Home Organisation without much effort. This information then could be 
used for phising attacks for example!

-------------------------------------------------------------------------------

Kerberos support:
Your web server needs to support Negotiate/SPNEGO Kerberos protocol. For 
example by using mod_auth_kerb.
- Make a symlink of the file 'WAYF' and name it like configured in the variable 
  $kerberosRedirectURL
- Protect file $kerberosRedirectURL with Kerberos. The Kerberos realm must be
  specified in "IDProvider.conf.php" for each IdP. Each IdP's KDC must also
  establish a Kerberos cross-realm trust with the WAYF's KDC. This was tested 
  with a Windows 2000 KDC, with the WAYF running on RHEL4. 

Credits for this feature go to Josh Howlett from Bristol University.

-------------------------------------------------------------------------------

Configuration file format:
Checkout the file 'IDProvider.conf.php' for an example of the file format. It's 
supposed to be mostly self-explanatory. Basically the file format is PHP code 
that defines an array of arrays called $IDProviders.

The keys of the array $IDProviders must correspond to the entityIDs of the 
Identity Providers or a unique value in case of a cascaded WAYF/DS or 
a category. The entityID must be a valid URI (URL or URN) where in the
case of a URN the last component must be a valid hostname.

If metadata is not parsed from SAML2 metadta (using the setting 
$useSAML2Metadata = false), the IdPs and category entries will be displayed 
in order as defined in the configuration file and no sorting is done.

If metadata is used ($useSAML2Metadata = true) to generate the list of Identity 
Providers, the Identity Providers will first be sorted according to their 
type/category, their Index value (see below) and then alphabetically after their 
(local) Name within the same type category. 
If an IdP does not have a type, its category is 'unknown'.
If there exists a type for an IdP that does not have a corresponding category 
it will be displayed in the category 'unknown' at the end of the drop down list 
but will keep its type value (this is important for the Embedded Discovery 
Service).

A general entry for an Identity Provider, a cascaded WAYF/DS or a category is 
of the following form:
$IDProviders[#key#] = #entry#

#key# is a unique value that must correspond to the entity's entityID in case 
the entry stands for an Identity Provider. For entries of Type category, the
#key# should be an identifier that corresponds to a 'Type' of an IdP.

#entry# is another hash array with the following keys: 
['Type']:   Optional        Type that is used for the embedded wayf to hide
                            or show certain categories. Default type will 
                            be 'unknown' if not specified.
                            An entry for another WAYF/DS that the user shall be 
                            redirected to should have ['Type'] ='wayf
                            The Type values 'category' and 'wayf' are reserved 
                            words that are not allowed to be assigned to 
                            entries for Identity Providers.
['Name']:   Mandatory       Default name to display in drop-down list
['en'|'it'|'fr'|'de'|'pt']['Name']:
            Optional        Display name in other languages
['SSO']:    Mandatory       Should be the SAML1 SSO endpoint of the IdP
['Realm']:  Optional        Kerberos Realm
['IP'][]:   Optional        IP ranges of that organizations that can be used to 
                            guess a user's Identity Provider
['Index']:  Optional        An alphanumerical value that is used for sorting 
                            categories and Identity Provider in ascending order 
                            if the Identity Providers are parsed from metadata.
                            This is only relevant if 
                            $includeLocalConfEntries = true

For category entries, only Type, (local) Name and Index are relevant.

-------------------------------------------------------------------------------

Version History:

1.14.3  Release date: 4. March 2011
        - Fixed a race condition. Thanks go to Robert Basch from MIT for 
          reporting the issue and providing a patch.

1.14.2  Release date: 15. December 2010
        - IDProvider.conf.php and config.php are not overwritten anymore by upgrades
        - Logging to Syslog now works properly and is more consistent
        - Access log now properly locks file
        - Unknown category is not shown anymore when there is no other category
        - Namespaces are now taken properly into account when parsing SAML2 
          metadata. Thanks go to Olivier Salaün for reporting this issue and
          submitting a patch.
        - Improved installation instructions

1.14.1  Release date: 12. November 2010
        - Fixed an encoding bug that affected non-ASCII characters in 
          JavaScripts. Thanks to Prof. Kazutsuna Yamaji for reporting this issue.
        - Corrected behaviour of $enableDSReturnParamCheck and 
          $useACURLsForReturnParamCheck. There won't be an error anymore if an SP 
          has no <idpdisc:DiscoveryResponse> extension defined. In such a case
          there will only be a check if $useACURLsForReturnParamCheck is enabled.
        - Fixed a bug in readMetadata.php that prevented CLI execution
        - Changed the default configuration option to generate the Embedded WAYF
          to false due to some concerns regarding phishing attacks
        - Added proper copyright statements to all source code files

To see the revision history of older versions, please have a look at:
https://forge.switch.ch/redmine/projects/wayf/wiki/Changes

Releases with a version number X.Y.Z usually are bug fix releases whereas
releases with a version number X.Y introduce new functionality.

-------------------------------------------------------------------------------
Embedded WAYF code snippet:
To get a valid HTML snippet to embedd in a web page, please access your WAYF 
with a URL like:

https://#HOSTNAME#/#PATH_TO_WAYF#/WAYF/embedded-wayf.js/snippet.html

The script then should return some HTML code that can be embedded together
with short descriptions of the available settings.

Embedded WAYF code limitations:
If the embedded WAYF is placed on the right side or at the bottom of a web page,
it may be that the web browser cannot expand and render the complete drop-down
list of Identity Providers.

-------------------------------------------------------------------------------
Path Info parameters and files:
Modifying the WAYF's URL it is possible to influence its behaviour. This can be
done by appending certain Path Info extension to the URL. The Path Info 
components can also be combined. The allowed syntax is:

[/#i18n string#][/redirect][/#entityID hostname#]
[/#i18n string#][/embedded-wayf.js]
[/embedded-wayf.js/snippet.html]
[/IDProviders.json]
[/IDProviders.php]
[/IDProviders.txt]

Note: Your web server must support the use of Path Info.

Hinted Identity Provider and transparent redirects
--------------------------------------------------
Path Info Extensions: [/redirect][/#entityID hostname#]

#entityID hostname# must be the host name of an entityId or the last component 
of a URN. Examples:
https://aai-login.switch.ch/idp/shibboleth         -> aai-login.switch.ch
urn:mace:switch.ch:aaitest:aai-demo-idp.switch.ch  -> aai-demo-idp.switch.ch

If the '/redirect' is included in the Path Info as well, the web browser is 
redirected transparently to the specified entityID hostname.

Note: One must make sure that the entityID hostname is not the same as one of
      the reserved keywords like 'redirect', the below mentioned file types
      or a i18n langauge abbreviation.

Language preselection:
----------------------
Path Info Extensions: [/#i18n string#]

Examples of i18n strings are 'en', 'de_CH' or 'fr_CH.ISO8859-1' etc. However, in
the default distribution only 'en', 'de', 'fr', 'it' and 'pt' are available and 
supported. But it would be easy to create sub types of existing languages  for
country/region support by adding something like this to languages.php:

--
// Create a country specific copy of the German language strings
$langStrings['de_CH'] = $langStrings['de'];

// Overwrite a specific string
$langStrings['de_CH']['title'] = 'Auswahl der Heimorganisation';
--


Special handlers:
-----------------
In order for the Embedded WAYF feature to work there are some special files that
need to be generated. The following Path Info Extensions must be the last 
components of the Path Info URL.

Path Info Extensions:
[/deleteSettings]                  As the name suggests, this handler deletes
                                   all settings cookies that were stored by the 
                                   WAYF service in cookies.
                                   Unless there is a 'return' GET argument 
                                   provided the user is sent to the settings 
                                   page.
[/embedded-wayf.js]                Generates the JavaScript for the Embedded WAYF
[/embedded-wayf.js/snippet.html]   Generates HTML snippet for the Embedded WAYF
[/idps-and-state.json]             Returns JSON data structure that contains
                                   the content of the IDProviders array. The last
                                   element of that array will be a key called 
                                   'preselectedIDP', which contains the 
                                   Identity Provider that would be preselected
                                   in the drop-down list for that user.
[/IDProviders.txt]                 Same as above but in human readable form.
[/IDProviders.php]                 Same as above but as PHP code

-------------------------------------------------------------------------------

Credits:
Find below the list of people who have contributed to code, either because they 
found bugs, suggested improvements or contributed code. Have a look at the 
version history in order to see the individual contributions. The list is sorted 
alphabetically.

- Robert Basch from MIT (US)
- Pavlos Drandakis from University of Athens (GR)
- Nicolas Dunand from Université Lausanne (CH)
- Michael R. Gettes from Internet2 (US)
- Nuno Gonçalves from FCCN (PT)
- Florent Guilleux from CRU (FR)
- Josh Howlett from University of Bristol (UK)
- Franz Kuster from ETHZ (CH)
- Wolgang Lierz from ETH Zurich (CH)
- Lourival Pereira Vieira Neto from RNP (BR)
- Martins Purins from Latvijas Universitates (LV)
- Olivier Salaün from RENATER (FR)
- Tom Scavo from Internet2 (US)
- Mika Suvanto from CSC (FI)
- Huân Thebault from Centre de Calcul de l'IN2P3 (FR)
- Prof. Kazutsuna Yamaji from NII (JP)
- And of course all SWITCH staff members who have contributed suggestions,
  bug fixes and translation to this code.